// <auto-generated />
using System;
using BingoAPI.Infrastructure.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BingoAPI.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230218164416_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BingoAPI.Core.Entities.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("BingoAPI.Core.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("GameSchedule")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e563aa88-86b1-4c69-a0f8-496b53c9ac26"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2d42b5b9-6f03-441d-94eb-fd20246c446c",
                            Email = "jsmith@example.com",
                            EmailConfirmed = false,
                            FullName = "John Smith",
                            GameSchedule = new DateTime(2023, 3, 1, 14, 30, 0, 0, DateTimeKind.Utc),
                            LockoutEnabled = false,
                            NormalizedEmail = "JSMITH@EXAMPLE.COM",
                            NormalizedUserName = "JSMITH@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEC4fHWEN91YTuHQLNL6EqyHfPjH7t/L7G6YjvRU+5EbnzBv4BUWMlEiSxfbz+O+bBw==",
                            PhoneNumber = "+1-555-123-4567",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4510146f-dd3d-4d6a-85dc-4d34fd90c3a7",
                            TwoFactorEnabled = false,
                            UserName = "jsmith@example.com"
                        },
                        new
                        {
                            Id = new Guid("d4a4a0ca-d7cb-4e8f-8c58-34535c9eab5b"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "17d546c4-9b1a-481c-95e5-d6c9ecf456b8",
                            Email = "jdoe@example.com",
                            EmailConfirmed = false,
                            FullName = "Jane Doe",
                            GameSchedule = new DateTime(2023, 3, 15, 17, 0, 0, 0, DateTimeKind.Utc),
                            LockoutEnabled = false,
                            NormalizedEmail = "JDOE@EXAMPLE.COM",
                            NormalizedUserName = "JDOE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOTZSD+95WRj4hvzWj8mRb1vz44mO5kMGm6zulNDaTERHmUHc+vsuk+lYCJKEP5EvA==",
                            PhoneNumber = "+1-555-987-6543",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8922a778-b75a-46a2-a6c7-502fce0458f9",
                            TwoFactorEnabled = false,
                            UserName = "jdoe@example.com"
                        },
                        new
                        {
                            Id = new Guid("87d8fde7-99da-4a9c-9cfc-64bfc84d7196"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c64cb83a-a40b-4cc7-87d3-a3ddcfaff9fb",
                            Email = "bjohnson@example.com",
                            EmailConfirmed = false,
                            FullName = "Bob Johnson",
                            GameSchedule = new DateTime(2023, 3, 10, 10, 0, 0, 0, DateTimeKind.Utc),
                            LockoutEnabled = false,
                            NormalizedEmail = "BJOHNSON@EXAMPLE.COM",
                            NormalizedUserName = "BJOHNSON@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECTHYN5dD6fL0/ZuZYwkO04d6XkkXXsxaOOTO/fx6R1TmRdx8ELEUrNVoxZRINqrBA==",
                            PhoneNumber = "+1-555-555-1212",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "27d26e7a-6246-41ae-bfd4-1c147bb8ee35",
                            TwoFactorEnabled = false,
                            UserName = "bjohnson@example.com"
                        },
                        new
                        {
                            Id = new Guid("1e9deac9-7e9d-46d6-997a-32efdf6d5f6c"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "325f9195-0c89-465f-88cc-fff9488587b7",
                            Email = "asmith@example.com",
                            EmailConfirmed = false,
                            FullName = "Alice Smith",
                            GameSchedule = new DateTime(2023, 3, 5, 12, 30, 0, 0, DateTimeKind.Utc),
                            LockoutEnabled = false,
                            NormalizedEmail = "ASMITH@EXAMPLE.COM",
                            NormalizedUserName = "ASMITH@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJNYmRkfaIPoU2VDViRd3WYPstzZVpiJQX1+9hde+T1vfVB0HeGCWZBZQOIX20AiHA==",
                            PhoneNumber = "+1-555-999-1212",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "698fbdc4-841a-4205-9222-5ab0ab2b5d83",
                            TwoFactorEnabled = false,
                            UserName = "asmith@example.com"
                        },
                        new
                        {
                            Id = new Guid("af690bfe-f82e-4856-b8dc-1075a5f5c6b9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4db62c9d-211e-4f34-8bc0-cfb560a7f104",
                            Email = "tlee@example.com",
                            EmailConfirmed = false,
                            FullName = "Tom Lee",
                            GameSchedule = new DateTime(2023, 3, 20, 14, 0, 0, 0, DateTimeKind.Utc),
                            LockoutEnabled = false,
                            NormalizedEmail = "TLEE@EXAMPLE.COM",
                            NormalizedUserName = "TLEE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEO2xCFM7gD9p/FjX0vh3oVJK//IVHoh9z7pJNgKmEg/kIQq4b+xITmxRP2jFq6lHAg==",
                            PhoneNumber = "+1-555-444-1212",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ad6713b0-a929-4409-b54f-7c7dbb64ab06",
                            TwoFactorEnabled = false,
                            UserName = "tlee@example.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("BingoAPI.Core.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("BingoAPI.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("BingoAPI.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("BingoAPI.Core.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BingoAPI.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("BingoAPI.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
